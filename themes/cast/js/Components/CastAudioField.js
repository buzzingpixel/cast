class CastAudioField{constructor(t){const e=this;return{el:t,mounted(){const{$el:t}=this;e.csrfTokenName=String(t.getAttribute("data-csrf-token-name")),e.csrfToken=String(t.getAttribute("data-csrf-token")),e.uploadKey=String(t.getAttribute("data-upload-key")),e.uploadUrl=String(t.getAttribute("data-upload-url")),this.hasFile=""!==t.getAttribute("data-audio-file-name")},data:{uploadIconIsActive:!1,uploadInProgress:!1,hasFile:!1},methods:{preventDefault(t){t.preventDefault(),t.stopPropagation()},dragOver(t){this.preventDefault(t),this.uploadIconIsActive=!0},dragLeave(t){this.preventDefault(t),this.uploadIconIsActive=!1},drop(t){const a=this;a.preventDefault(t),a.uploadIconIsActive=!1,a.uploadInProgress=!0;try{const o=t.dataTransfer.files[0];if("audio"!==o.type.split("/")[0])throw new Error("Not an audio file");e.uploadFile(o,()=>{a.uploadComplete()},()=>{a.uploadFailed()})}catch(t){a.uploadInProgress=!1}},uploadComplete(){this.uploadInProgress=!1},uploadFailed(){this.uploadInProgress=!1}}}}uploadFile(t,e,a){const o=new FormData;o.append(this.csrfTokenName,this.csrfToken),o.append("upload_key",this.uploadKey),o.append("file",t,t.name),axios.post(this.uploadUrl,FormData).then(t=>{console.log("then",t),"function"==typeof e&&e()}).catch(()=>{"function"==typeof a&&a()})}}export default CastAudioField;
//# sourceMappingURL=CastAudioField.js.map