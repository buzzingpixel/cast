class CastAudioField{constructor(t){const e=this;return{el:t,mounted(){const{$el:t}=this;e.csrfTokenName=String(t.getAttribute("data-csrf-token-name")),e.csrfToken=String(t.getAttribute("data-csrf-token")),e.uploadKey=String(t.getAttribute("data-upload-key")),e.uploadUrl=String(t.getAttribute("data-upload-url")),this.hasFile=""!==t.getAttribute("data-audio-file-name")},data:{uploadIconIsActive:null,uploadInProgress:null,hasFile:null},methods:{preventDefault(t){t.preventDefault(),t.stopPropagation()},dragOver(t){this.preventDefault(t),this.uploadIconIsActive=!0},dragLeave(t){this.preventDefault(t),this.uploadIconIsActive=!1},drop(t){const a=this;a.preventDefault(t),a.uploadIconIsActive=!1,a.uploadInProgress=!0;try{const o=t.dataTransfer.files[0];if("audio"!==o.type.split("/")[0])throw new Error("Not an audio file");e.uploadFile(o,(t,e)=>{a.uploadComplete(t,e)},()=>{a.uploadFailed()})}catch(t){a.uploadInProgress=!1}},uploadComplete(t,e){this.uploadInProgress=!1,this.hasFile=!0,console.log(t,e)},uploadFailed(){this.uploadInProgress=!1}}}}uploadFile(t,e,a){const o=this,l=new FormData;l.append(o.csrfTokenName,o.csrfToken),l.append("upload_key",o.uploadKey),l.append("file",t,t.name),axios.post(o.uploadUrl,l,{responseType:"json",validateStatus:t=>200===t||400===t}).then(t=>{o.uploadKey=t.data.newUploadKey,t.data.success||"function"!=typeof a||a(t),"function"==typeof e&&e(t.data.file.location,t.data.file.name)}).catch(t=>{"function"==typeof a&&a(t)})}}export default CastAudioField;
//# sourceMappingURL=CastAudioField.js.map